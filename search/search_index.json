{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"laminas-stdlib üá∑üá∫ –†—É—Å—Å–∫–∏–º –≥—Ä–∞–∂–¥–∞–Ω–∞–º –ú—ã, —É—á–∞—Å—Ç–Ω–∏–∫–∏ Laminas, —Ä–æ–¥–∏–ª–∏—Å—å –∏ –∂–∏–≤–µ–º –≤ —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∞—Ö. –£ –º–Ω–æ–≥–∏—Ö –∏–∑ –Ω–∞—Å –µ—Å—Ç—å –¥—Ä—É–∑—å—è, —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–∏ –∏ –∫–æ–ª–ª–µ–≥–∏ –∫–∞–∫ –≤ –†–æ—Å—Å–∏–∏, —Ç–∞–∫ –∏ –≤ –£–∫—Ä–∞–∏–Ω–µ. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–∑ –Ω–∞—Å —Ä–æ–¥–∏–ª–∏—Å—å –≤ –†–æ—Å—Å–∏–∏. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–∑ –Ω–∞—Å –∂–∏–≤—É—Ç –≤ –†–æ—Å—Å–∏–∏. –£ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –±–∞–±—É—à–∫–∏ –∏ –¥–µ–¥—É—à–∫–∏ —Å—Ä–∞–∂–∞–ª–∏—Å—å —Å —Ñ–∞—à–∏—Å—Ç–∞–º–∏ –≤–æ –í—Ç–æ—Ä–æ–π –º–∏—Ä–æ–≤–æ–π –≤–æ–π–Ω–µ. –ó–¥–µ—Å—å –Ω–∏–∫—Ç–æ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–∞—à–∏–∑–º. –£ –æ–¥–Ω–æ–≥–æ –∏–∑ –Ω–∞—Å –µ—Å—Ç—å —É–∫—Ä–∞–∏–Ω—Å–∫–∞—è —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏—Ü–∞, –∫–æ—Ç–æ—Ä–∞—è —Å–ø–∞—Å–ª–∞—Å—å –∏–∑ –¥–æ–º–∞ –≤–º–µ—Å—Ç–µ —Å —Å—ã–Ω–æ–º. –ü–æ–µ–∑–¥ –∑–∞–¥–µ—Ä–∂–∞–ª—Å—è –∏–∑-–∑–∞ –±–æ–º–±–µ–∂–∫–∏ –Ω–∞ –¥–æ—Ä–æ–≥–µ –≤–ø–µ—Ä–µ–¥–∏. –£ –Ω–∞—Å –µ—Å—Ç—å –¥—Ä—É–∑—å—è, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä—è—á—É—Ç—Å—è –≤ –±–æ–º–±–æ—É–±–µ–∂–∏—â–∞—Ö. –ú—ã —Å —Ç—Ä–µ–≤–æ–≥–æ–π –∂–¥–µ–º –≤–µ—Å—Ç–æ—á–∫–∏ –æ—Ç –Ω–∏—Ö –ø–æ—Å–ª–µ –≤–æ–∑–¥—É—à–Ω—ã—Ö –Ω–∞–ª–µ—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –±–µ—Å–ø–æ—Ä—è–¥–æ—á–Ω–æ –Ω–∞–Ω–æ—Å—è—Ç —É–¥–∞—Ä—ã –∏ –ø–æ–ø–∞–¥–∞—é—Ç –ø–æ –±–æ–ª—å–Ω–∏—Ü–∞–º, —à–∫–æ–ª–∞–º, –¥–µ—Ç—Å–∫–∏–º —Å–∞–¥–∞–º –∏ –¥–æ–º–∞–º. –ú—ã –Ω–µ –±–µ—Ä–µ–º —ç—Ç–æ –∏–∑ –∫–∞–∫–∏—Ö-–ª–∏–±–æ –°–ú–ò. –ú—ã –Ω–∞–±–ª—é–¥–∞–µ–º —ç—Ç–æ –Ω–∞–ø—Ä—è–º—É—é. –í—ã –¥–æ–≤–µ—Ä—è–µ—Ç–µ –Ω–∞–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, —á—Ç–æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞—à–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã, –∏ –º—ã –ø—Ä–æ—Å–∏–º –≤–∞—Å –¥–æ–≤–µ—Ä–∏—Ç—å—Å—è –Ω–∞–º –≤–Ω–æ–≤—å. –ú—ã –Ω—É–∂–¥–∞–µ–º—Å—è –≤ –ø–æ–º–æ—â–∏. –í—ã—Ö–æ–¥–∏—Ç–µ –∏ –ø—Ä–æ—Ç–µ—Å—Ç—É–π—Ç–µ –ø—Ä–æ—Ç–∏–≤ —ç—Ç–æ–π –±–µ—Å–ø–æ–ª–µ–∑–Ω–æ–π –≤–æ–π–Ω—ã. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫—Ä–æ–≤–æ–ø—Ä–æ–ª–∏—Ç–∏–µ. –°–∫–∞–∂–∏—Ç–µ \"–ù–µ—Ç –≤–æ–π–Ω–µ!\" üá∫üá∏ To Citizens of Russia We at Laminas come from all over the world. Many of us have friends, family and colleagues in both Russia and Ukraine. Some of us were born in Russia. Some of us currently live in Russia. Some have grandparents who fought Nazis in World War II. Nobody here supports fascism. One team member has a Ukrainian relative who fled her home with her son. The train was delayed due to bombing on the road ahead. We have friends who are hiding in bomb shelters. We anxiously follow up on them after the air raids, which indiscriminately fire at hospitals, schools, kindergartens and houses. We're not taking this from any media. These are our actual experiences. You trust us enough to use our software. We ask that you trust us to say the truth on this. We need your help. Go out and protest this unnecessary war. Stop the bloodshed. Say \"stop the war!\" Laminas\\Stdlib is a set of components that implements general purpose utility class for different scopes like: array utilities functions; general messaging systems; string wrappers; etc. File issues at https://github.com/laminas/laminas-stdlib/issues Documentation is at https://docs.laminas.dev/laminas-stdlib/ Benchmarks We provide scripts for benchmarking laminas-stdlib using the PHPBench framework; these can be found in the benchmark/ directory. To execute the benchmarks you can run the following command: $ vendor/bin/phpbench run --report=aggregate","title":"Home"},{"location":"#laminas-stdlib","text":"","title":"laminas-stdlib"},{"location":"#_1","text":"–ú—ã, —É—á–∞—Å—Ç–Ω–∏–∫–∏ Laminas, —Ä–æ–¥–∏–ª–∏—Å—å –∏ –∂–∏–≤–µ–º –≤ —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∞—Ö. –£ –º–Ω–æ–≥–∏—Ö –∏–∑ –Ω–∞—Å –µ—Å—Ç—å –¥—Ä—É–∑—å—è, —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–∏ –∏ –∫–æ–ª–ª–µ–≥–∏ –∫–∞–∫ –≤ –†–æ—Å—Å–∏–∏, —Ç–∞–∫ –∏ –≤ –£–∫—Ä–∞–∏–Ω–µ. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–∑ –Ω–∞—Å —Ä–æ–¥–∏–ª–∏—Å—å –≤ –†–æ—Å—Å–∏–∏. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–∑ –Ω–∞—Å –∂–∏–≤—É—Ç –≤ –†–æ—Å—Å–∏–∏. –£ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –±–∞–±—É—à–∫–∏ –∏ –¥–µ–¥—É—à–∫–∏ —Å—Ä–∞–∂–∞–ª–∏—Å—å —Å —Ñ–∞—à–∏—Å—Ç–∞–º–∏ –≤–æ –í—Ç–æ—Ä–æ–π –º–∏—Ä–æ–≤–æ–π –≤–æ–π–Ω–µ. –ó–¥–µ—Å—å –Ω–∏–∫—Ç–æ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–∞—à–∏–∑–º. –£ –æ–¥–Ω–æ–≥–æ –∏–∑ –Ω–∞—Å –µ—Å—Ç—å —É–∫—Ä–∞–∏–Ω—Å–∫–∞—è —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏—Ü–∞, –∫–æ—Ç–æ—Ä–∞—è —Å–ø–∞—Å–ª–∞—Å—å –∏–∑ –¥–æ–º–∞ –≤–º–µ—Å—Ç–µ —Å —Å—ã–Ω–æ–º. –ü–æ–µ–∑–¥ –∑–∞–¥–µ—Ä–∂–∞–ª—Å—è –∏–∑-–∑–∞ –±–æ–º–±–µ–∂–∫–∏ –Ω–∞ –¥–æ—Ä–æ–≥–µ –≤–ø–µ—Ä–µ–¥–∏. –£ –Ω–∞—Å –µ—Å—Ç—å –¥—Ä—É–∑—å—è, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä—è—á—É—Ç—Å—è –≤ –±–æ–º–±–æ—É–±–µ–∂–∏—â–∞—Ö. –ú—ã —Å —Ç—Ä–µ–≤–æ–≥–æ–π –∂–¥–µ–º –≤–µ—Å—Ç–æ—á–∫–∏ –æ—Ç –Ω–∏—Ö –ø–æ—Å–ª–µ –≤–æ–∑–¥—É—à–Ω—ã—Ö –Ω–∞–ª–µ—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –±–µ—Å–ø–æ—Ä—è–¥–æ—á–Ω–æ –Ω–∞–Ω–æ—Å—è—Ç —É–¥–∞—Ä—ã –∏ –ø–æ–ø–∞–¥–∞—é—Ç –ø–æ –±–æ–ª—å–Ω–∏—Ü–∞–º, —à–∫–æ–ª–∞–º, –¥–µ—Ç—Å–∫–∏–º —Å–∞–¥–∞–º –∏ –¥–æ–º–∞–º. –ú—ã –Ω–µ –±–µ—Ä–µ–º —ç—Ç–æ –∏–∑ –∫–∞–∫–∏—Ö-–ª–∏–±–æ –°–ú–ò. –ú—ã –Ω–∞–±–ª—é–¥–∞–µ–º —ç—Ç–æ –Ω–∞–ø—Ä—è–º—É—é. –í—ã –¥–æ–≤–µ—Ä—è–µ—Ç–µ –Ω–∞–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, —á—Ç–æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞—à–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã, –∏ –º—ã –ø—Ä–æ—Å–∏–º –≤–∞—Å –¥–æ–≤–µ—Ä–∏—Ç—å—Å—è –Ω–∞–º –≤–Ω–æ–≤—å. –ú—ã –Ω—É–∂–¥–∞–µ–º—Å—è –≤ –ø–æ–º–æ—â–∏. –í—ã—Ö–æ–¥–∏—Ç–µ –∏ –ø—Ä–æ—Ç–µ—Å—Ç—É–π—Ç–µ –ø—Ä–æ—Ç–∏–≤ —ç—Ç–æ–π –±–µ—Å–ø–æ–ª–µ–∑–Ω–æ–π –≤–æ–π–Ω—ã. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫—Ä–æ–≤–æ–ø—Ä–æ–ª–∏—Ç–∏–µ. –°–∫–∞–∂–∏—Ç–µ \"–ù–µ—Ç –≤–æ–π–Ω–µ!\"","title":"üá∑üá∫ –†—É—Å—Å–∫–∏–º –≥—Ä–∞–∂–¥–∞–Ω–∞–º"},{"location":"#to-citizens-of-russia","text":"We at Laminas come from all over the world. Many of us have friends, family and colleagues in both Russia and Ukraine. Some of us were born in Russia. Some of us currently live in Russia. Some have grandparents who fought Nazis in World War II. Nobody here supports fascism. One team member has a Ukrainian relative who fled her home with her son. The train was delayed due to bombing on the road ahead. We have friends who are hiding in bomb shelters. We anxiously follow up on them after the air raids, which indiscriminately fire at hospitals, schools, kindergartens and houses. We're not taking this from any media. These are our actual experiences. You trust us enough to use our software. We ask that you trust us to say the truth on this. We need your help. Go out and protest this unnecessary war. Stop the bloodshed. Say \"stop the war!\" Laminas\\Stdlib is a set of components that implements general purpose utility class for different scopes like: array utilities functions; general messaging systems; string wrappers; etc. File issues at https://github.com/laminas/laminas-stdlib/issues Documentation is at https://docs.laminas.dev/laminas-stdlib/","title":"üá∫üá∏ To Citizens of Russia"},{"location":"#benchmarks","text":"We provide scripts for benchmarking laminas-stdlib using the PHPBench framework; these can be found in the benchmark/ directory. To execute the benchmarks you can run the following command: $ vendor/bin/phpbench run --report=aggregate","title":"Benchmarks"},{"location":"v3/console-helper/","text":"Console Helper Writing one-off scripts or vendor binaries for a package is often problematic: You need to parse arguments manually. You need to send output to the console in a meaningful fashion: Using STDOUT for meaningful, expected output Using STDERR for error messages Ensuring any line breaks are converted to PHP_EOL Optionally, using console colors to provide context, which means: Detecting whether or not the console supports colors in the first place Providing appropriate escape sequences to produce color Laminas\\Stdlib\\ConsoleHelper helps to address the second major bullet point and all beneath it in a minimal fashion. Usage Typical usage is to instantiate a ConsoleHelper , and call one of its methods: use Laminas\\Stdlib\\ConsoleHelper; $helper = new ConsoleHelper(); $helper-&gt;writeLine('This is output'); You can optionally pass a PHP stream resource to the constructor, which will be used to determine whether or not color support is available: $helper = new ConsoleHelper($stream); By default, it assumes STDOUT , and tests against that. Available methods ConsoleHelper provides the following methods. colorize colorize(string $string) : string colorize() accepts a formatted string, and will then apply ANSI color sequences to them, if color support is detected. The following sequences are currently supported: &lt;info&gt;...&lt;/info&gt; will apply a green color sequence around the provided text. &lt;error&gt;...&lt;/error&gt; will apply a red color sequence around the provided text. You may mix multiple sequences within the same stream. write write(string $string, bool $colorize = true, resource $stream = STDOUT) : void Emits the provided $string to the provided $stream (which defaults to STDOUT if not provided). Any EOL sequences are convered to PHP_EOL . If $colorize is true , the string is first passed to colorize() as well. writeline writeLine(string $string, bool $colorize = true, resource $stream = STDOUT) : void Same as write() , except it also appends a PHP_EOL sequence to the $string . writeErrorMessage writeErrorMessage(string $message) Wraps $message in an &lt;error&gt;&lt;/error&gt; sequence, and passes it to writeLine() , using STDERR as the $stream . Example Below is an example class that accepts an argument list, and determines how and what to emit. namespace Foo; use Laminas\\Stdlib\\ConsoleHelper; class HelloWorld { private $helper; public function __construct(ConsoleHelper $helper = null) { $this-&gt;helper = $helper ?: new ConsoleHelper(); } public function __invoke(array $args) { if (! count($args)) { $this-&gt;helper-&gt;writeErrorMessage('Missing arguments!'); return; } if (count($args) &gt; 1) { $this-&gt;helper-&gt;writeErrorMessage('Too many arguments!'); return; } $target = array_shift($args); $this-&gt;helper-&gt;writeLine(sprintf( '&lt;info&gt;Hello&lt;/info&gt; %s', $target )); } } When to upgrade ConsoleHelper is deliberately simple, and assumes that your primary need for console tooling is for output considerations. If you need to parse complex argument strings, we recommend using laminas-console / zf-console or symfony/console , as these packages provide those capabilities, as well as far more colorization and console feature detection facilities.","title":"Console Helper"},{"location":"v3/console-helper/#console-helper","text":"Writing one-off scripts or vendor binaries for a package is often problematic: You need to parse arguments manually. You need to send output to the console in a meaningful fashion: Using STDOUT for meaningful, expected output Using STDERR for error messages Ensuring any line breaks are converted to PHP_EOL Optionally, using console colors to provide context, which means: Detecting whether or not the console supports colors in the first place Providing appropriate escape sequences to produce color Laminas\\Stdlib\\ConsoleHelper helps to address the second major bullet point and all beneath it in a minimal fashion.","title":"Console Helper"},{"location":"v3/console-helper/#usage","text":"Typical usage is to instantiate a ConsoleHelper , and call one of its methods: use Laminas\\Stdlib\\ConsoleHelper; $helper = new ConsoleHelper(); $helper-&gt;writeLine('This is output'); You can optionally pass a PHP stream resource to the constructor, which will be used to determine whether or not color support is available: $helper = new ConsoleHelper($stream); By default, it assumes STDOUT , and tests against that.","title":"Usage"},{"location":"v3/console-helper/#available-methods","text":"ConsoleHelper provides the following methods.","title":"Available methods"},{"location":"v3/console-helper/#example","text":"Below is an example class that accepts an argument list, and determines how and what to emit. namespace Foo; use Laminas\\Stdlib\\ConsoleHelper; class HelloWorld { private $helper; public function __construct(ConsoleHelper $helper = null) { $this-&gt;helper = $helper ?: new ConsoleHelper(); } public function __invoke(array $args) { if (! count($args)) { $this-&gt;helper-&gt;writeErrorMessage('Missing arguments!'); return; } if (count($args) &gt; 1) { $this-&gt;helper-&gt;writeErrorMessage('Too many arguments!'); return; } $target = array_shift($args); $this-&gt;helper-&gt;writeLine(sprintf( '&lt;info&gt;Hello&lt;/info&gt; %s', $target )); } }","title":"Example"},{"location":"v3/console-helper/#when-to-upgrade","text":"ConsoleHelper is deliberately simple, and assumes that your primary need for console tooling is for output considerations. If you need to parse complex argument strings, we recommend using laminas-console / zf-console or symfony/console , as these packages provide those capabilities, as well as far more colorization and console feature detection facilities.","title":"When to upgrade"},{"location":"v3/migration/","text":"Migration Guide From v2 to v3 The changes made going from v2 to v3 were: Removal of the Hydrator subcomponent. Removal of the CallbackHandler class. Removal of Laminas\\Stdlib\\Guard\\GuardUtils . Hydrators The biggest single change from version 2 to version 3 is that the hydrator subcomponent, which was deprecated in v2.7.0, is now removed. This means that if you were using laminas-stdlib principally for the hydrators, you need to convert your code to use laminas-hydrator . This will also mean a multi-step migration. laminas-stdlib v3 pre-dates laminas-hydrator v2.1, which will be the first version that supports laminas-stdlib v3 and laminas-servicemanager v3. If you are using Composer, the migration should be seamless: Remove your laminas-stdlib dependency: $ composer remove laminas/laminas-stdlib Update to use laminas-hydrator: $ composer require laminas/laminas-hydrator When laminas-hydrator updates to newer versions of laminas-stdlib and laminas-servicemanager, you will either automatically get those versions, or you can tell composer to use those specific versions: $ composer require \"laminas/laminas-stdlib:^3.0\" CallbackHandler Laminas\\Stdlib\\CallbackHandler primarily existed for legacy purposes; it was created before the callable typehint existed, so that we could typehint PHP callables. It also provided some minimal features around lazy-loading callables from instantiable classes, but these features were rarely used, and better approaches already exist for handling such functinality in laminas-servicemanager and mezzio. As such, the class was marked deprecated in v2.7.0, and removed for v3.0.0. GuardUtils Version 3 removes Laminas\\Stdlib\\Guard\\GuardUtils . This abstract class existed to provide the functionality of the various traits also present in that subcomponent, for consumers on versions of PHP earlier than 5.4. Since the minimum required version is now PHP 5.5, the class is unnecessary. If you were using it previously, compose the related traits instead.","title":"Migration"},{"location":"v3/migration/#migration-guide","text":"","title":"Migration Guide"},{"location":"v3/migration/#from-v2-to-v3","text":"The changes made going from v2 to v3 were: Removal of the Hydrator subcomponent. Removal of the CallbackHandler class. Removal of Laminas\\Stdlib\\Guard\\GuardUtils .","title":"From v2 to v3"}]}